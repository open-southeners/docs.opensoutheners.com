import{_ as u,r as o,o as r,c as d,a as n,b as a,w as e,e as p,d as s}from"./app.ff3c52bf.js";const k={},m=p(`<h1 id="enums" tabindex="-1"><a class="header-anchor" href="#enums" aria-hidden="true">#</a> Enums</h1><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>Remember, these functions requires PHP 8.1+ minimum to work. Don&#39;t use or ignore them if you&#39;re using PHP 8.</p></div><h2 id="is-enum" tabindex="-1"><a class="header-anchor" href="#is-enum" aria-hidden="true">#</a> is_enum</h2><p>Checks wether the sent enum class string or case (instanced enum) is an enum:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token keyword">function</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelHelpers<span class="token punctuation">\\</span>Enums<span class="token punctuation">\\</span>is_enum</span><span class="token punctuation">;</span>

<span class="token function">is_enum</span><span class="token punctuation">(</span><span class="token class-name static-context">MyEnum</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),h={id:"enum-is-backed",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#enum-is-backed","aria-hidden":"true"},"#",-1),v=s(" enum_is_backed "),g=s("Checks wether the sent enum class string or case (instanced enum) is a "),b={href:"https://www.php.net/manual/en/language.enumerations.backed.php",target:"_blank",rel:"noopener noreferrer"},y=s("backed enum"),f=s(":"),E=p(`<div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token keyword">function</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelHelpers<span class="token punctuation">\\</span>Enums<span class="token punctuation">\\</span>enum_is_backed</span><span class="token punctuation">;</span>

<span class="token function">enum_is_backed</span><span class="token punctuation">(</span><span class="token class-name static-context">MyNonBackedEnum</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="has-case" tabindex="-1"><a class="header-anchor" href="#has-case" aria-hidden="true">#</a> has_case</h2><p>Checks if given enum class string or instance has the specified case:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token keyword">function</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelHelpers<span class="token punctuation">\\</span>Enums<span class="token punctuation">\\</span>has_case</span><span class="token punctuation">;</span>

<span class="token function">has_case</span><span class="token punctuation">(</span><span class="token class-name static-context">MyEnum</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;FIRST_CASE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),x={id:"get-enum-class",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#get-enum-class","aria-hidden":"true"},"#",-1),S=s(" get_enum_class "),C=p(`<p>Get class string (namespace) from enum case (instanced enum):</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Enums<span class="token punctuation">\\</span>MyEnum</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token keyword">function</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelHelpers<span class="token punctuation">\\</span>Enums<span class="token punctuation">\\</span>get_enum_class</span><span class="token punctuation">;</span>

<span class="token function">get_enum_class</span><span class="token punctuation">(</span><span class="token class-name static-context">MyEnum</span><span class="token operator">::</span><span class="token constant">FIRST_CASE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;App\\Enums\\MyEnum&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),A={id:"enum-to-array",tabindex:"-1"},I=n("a",{class:"header-anchor",href:"#enum-to-array","aria-hidden":"true"},"#",-1),M=s(" enum_to_array "),H=n("p",null,"Get enum class string or instance as array of key-values (in case of backed, otherwise just values):",-1),q=n("div",{class:"language-php ext-php line-numbers-mode"},[n("pre",{class:"language-php"},[n("code",null,[n("span",{class:"token keyword"},"enum"),s(),n("span",{class:"token class-name-definition class-name"},"MyEnum"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword type-declaration"},"string"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token constant"},"FIRST_CASE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string single-quoted-string"},"'first'"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token constant"},"SECOND_CASE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string single-quoted-string"},"'second'"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token constant"},"THIRD_CASE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string single-quoted-string"},"'third'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=n("div",{class:"language-php ext-php line-numbers-mode"},[n("pre",{class:"language-php"},[n("code",null,[n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token package"},[s("OpenSoutheners"),n("span",{class:"token punctuation"},"\\"),s("LaravelHelpers"),n("span",{class:"token punctuation"},"\\"),s("Enums"),n("span",{class:"token punctuation"},"\\"),s("enum_to_array")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token function"},"enum_to_array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name static-context"},"MyEnum"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// ['FIRST_CASE' => 'first', 'SECOND_CASE' => 'second', 'THIRD_CASE' => 'third']"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N={id:"enum-values",tabindex:"-1"},O=n("a",{class:"header-anchor",href:"#enum-values","aria-hidden":"true"},"#",-1),T=s(" enum_values "),D=n("p",null,"Get enum class string or instance as array of values:",-1),G=n("div",{class:"language-php ext-php line-numbers-mode"},[n("pre",{class:"language-php"},[n("code",null,[n("span",{class:"token keyword"},"enum"),s(),n("span",{class:"token class-name-definition class-name"},"MyEnum"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword type-declaration"},"string"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token constant"},"FIRST_CASE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string single-quoted-string"},"'first'"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token constant"},"SECOND_CASE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string single-quoted-string"},"'second'"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token constant"},"THIRD_CASE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string single-quoted-string"},"'third'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("div",{class:"language-php ext-php line-numbers-mode"},[n("pre",{class:"language-php"},[n("code",null,[n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token package"},[s("OpenSoutheners"),n("span",{class:"token punctuation"},"\\"),s("LaravelHelpers"),n("span",{class:"token punctuation"},"\\"),s("Enums"),n("span",{class:"token punctuation"},"\\"),s("enum_values")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token function"},"enum_values"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name static-context"},"MyEnum"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// ['first', 'second', 'third']"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1);function B(F,P){const t=o("Badge"),i=o("ExternalLinkIcon"),c=o("CodeGroupItem"),l=o("CodeGroup");return r(),d("div",null,[m,n("h2",h,[_,v,a(t,{type:"tip",text:"0.8.0+",vertical:"middle"})]),n("p",null,[g,n("a",b,[y,a(i)]),f]),E,n("h2",x,[w,S,a(t,{type:"tip",text:"0.8.0+",vertical:"middle"})]),C,n("h2",A,[I,M,a(t,{type:"tip",text:"0.8.0+",vertical:"middle"})]),H,a(l,null,{default:e(()=>[a(c,{title:"MyEnum.php"},{default:e(()=>[q]),_:1}),a(c,{title:"enum_to_array"},{default:e(()=>[R]),_:1})]),_:1}),n("h2",N,[O,T,a(t,{type:"tip",text:"0.8.0+",vertical:"middle"})]),D,a(l,null,{default:e(()=>[a(c,{title:"MyEnum.php"},{default:e(()=>[G]),_:1}),a(c,{title:"enum_values"},{default:e(()=>[L]),_:1})]),_:1})])}var j=u(k,[["render",B],["__file","enums.html.vue"]]);export{j as default};
