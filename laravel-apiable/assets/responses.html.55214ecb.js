import{_ as c,r as o,o as i,c as l,b as s,a,w as u,e,d as n}from"./app.f9778456.js";const r={},d=e(`<h1 id="responses" tabindex="-1"><a class="header-anchor" href="#responses" aria-hidden="true">#</a> Responses</h1><p>For your API controllers responses you&#39;ve multiple ways to transform your models or collection of models to JSON:API, here we list all of them.</p><h2 id="custom-resource-type" tabindex="-1"><a class="header-anchor" href="#custom-resource-type" aria-hidden="true">#</a> Custom resource type</h2><p>To customise the resource type, the one that you see as the <code>type: &quot;post&quot;</code> (in case of a Post model), <strong>this is very important for your frontend</strong> to identify the resource. If you want to customise this:</p><ol><li>Add <code>OpenSoutheners\\LaravelApiable\\Contracts\\JsonApiable</code> contract to the model class.</li><li>Then add <code>jsonApiableOptions</code> method to the model returning the type as a string.</li></ol><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Tests<span class="token punctuation">\\</span>Fixtures</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>JsonApiable</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token keyword">implements</span> <span class="token class-name">JsonApiable</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Set options for model to be serialize with JSON:API.
     *
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">\\</span>OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>JsonApiableOptions</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">jsonApiableOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name static-context">JsonApiableOptions</span><span class="token operator">::</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">resourceType</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;publication&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),k={class:"custom-container tip"},m=s("p",{class:"custom-container-title"},"TIP",-1),v=n("Just remember to check the allowed types in "),h={href:"https://jsonapi.org/format/#document-member-names",target:"_blank",rel:"noopener noreferrer"},b=n("the oficial JSON:API spec"),g=n("."),f=e(`<h2 id="custom-api-resource-class" tabindex="-1"><a class="header-anchor" href="#custom-api-resource-class" aria-hidden="true">#</a> Custom API resource class</h2><p>Adding the <code>transformer</code> to your model&#39;s <code>jsonApiableOptions</code> method which needs to point to an API resource that extends <code>JsonApiResource</code>:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Tests<span class="token punctuation">\\</span>Fixtures</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>JsonApiable</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Resources<span class="token punctuation">\\</span>PostResource</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token keyword">implements</span> <span class="token class-name">JsonApiable</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Set options for model to be serialize with JSON:API.
     *
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">\\</span>OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>JsonApiableOptions</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">jsonApiableOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name static-context">JsonApiableOptions</span><span class="token operator">::</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">transformer</span><span class="token punctuation">(</span><span class="token class-name static-context">PostResource</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Also your JSON:API resource class should look like this:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Resources</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>User</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Auth</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Resources<span class="token punctuation">\\</span>JsonApiResource</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">PostResource</span> <span class="token keyword">extends</span> <span class="token class-name">JsonApiResource</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Attach additional attributes data.
     *
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">withAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;is_first_visit&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">last_accessed_at</span> <span class="token operator">===</span> <span class="token constant">null</span><span class="token punctuation">,</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">mergeWhen</span><span class="token punctuation">(</span><span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">User</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">author</span><span class="token operator">-&gt;</span><span class="token property">id</span> <span class="token operator">===</span> <span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
                <span class="token string single-quoted-string">&#39;is_author&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="using-jsonapiresponse-to-create-api-responses" tabindex="-1"><a class="header-anchor" href="#using-jsonapiresponse-to-create-api-responses" aria-hidden="true">#</a> Using JsonApiResponse to create API responses</h2>`,6),y={class:"custom-container tip"},_=s("p",{class:"custom-container-title"},"TIP",-1),w=n("For the requests side with features like allowing specific filters, sorts, etc., you should "),A=n("check our Request section"),x=n("."),O=s("h3",{id:"list-of-resources",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#list-of-resources","aria-hidden":"true"},"#"),n(" List of resources")],-1),J={class:"custom-container tip"},I=s("p",{class:"custom-container-title"},"TIP",-1),P=n("This will get a paginated response. In case you've install "),R={href:"https://github.com/hammerstonedev/fast-paginate",target:"_blank",rel:"noopener noreferrer"},S=n("hammerstone/fast-paginate"),L=n(" it will use fastPaginate to make it faster."),q=e(`<p>To get a list (wrapped in a <code>JsonApiCollection</code>) of your resources query you should do the following:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token class-name static-context">JsonApiResponse</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name static-context">Film</span><span class="token operator">::</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;LIKE&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;The%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="one-resource-by-key" tabindex="-1"><a class="header-anchor" href="#one-resource-by-key" aria-hidden="true">#</a> One resource by key</h3><p>And to get a single resource you can do the following:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token class-name static-context">JsonApiResponse</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name static-context">Film</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getOne</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>But <strong>you are not only limited to send a key</strong>, you could also send a model instance, as long as it has the key (<code>id</code> by default in Laravel) available:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$film</span> <span class="token operator">=</span> <span class="token class-name static-context">Film</span><span class="token operator">::</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name static-context">JsonApiResponse</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name static-context">Film</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getOne</span><span class="token punctuation">(</span><span class="token variable">$film</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function T(F,N){const t=o("ExternalLinkIcon"),p=o("RouterLink");return i(),l("div",null,[d,s("div",k,[m,s("p",null,[v,s("a",h,[b,a(t)]),g])]),f,s("div",y,[_,s("p",null,[w,a(p,{to:"/guide/requests.html"},{default:u(()=>[A]),_:1}),x])]),O,s("div",J,[I,s("p",null,[P,s("a",R,[S,a(t)]),L])]),q])}var j=c(r,[["render",T],["__file","responses.html.vue"]]);export{j as default};
