import{_ as l,r as i,o as c,c as u,b as s,a as n,w as e,e as o,d as a}from"./app.f9778456.js";const r={},d=o(`<h1 id="testing" tabindex="-1"><a class="header-anchor" href="#testing" aria-hidden="true">#</a> Testing</h1><p>This package also have some testing utilities built on top of PHPUnit and Laravel&#39;s framework assertions.</p><h2 id="assertions" tabindex="-1"><a class="header-anchor" href="#assertions" aria-hidden="true">#</a> Assertions</h2><p>Simple assert that your API route is returning a proper JSON:API response:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),k={class:"table-of-contents"},v=a("Assertions"),h=a("at"),b=a("atRelation"),g=a("hasAttribute"),m=a("hasNotAttribute "),f=a("hasAttributes"),A=a("hasNotAttributes "),_=a("hasId"),$=a("hasType"),y=a("hasAnyRelationships"),J=a("hasNotAnyRelationships"),w=a("hasRelationshipWith"),x=a("hasNotRelationshipWith"),q=a("isCollection"),S=a("isResource"),T=o(`<h3 id="at" tabindex="-1"><a class="header-anchor" href="#at" aria-hidden="true">#</a> at</h3><p>Assert the resource at position of the collection starting by 0.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>AssertableJsonApi</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">AssertableJsonApi</span> <span class="token variable">$assert</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="atrelation" tabindex="-1"><a class="header-anchor" href="#atrelation" aria-hidden="true">#</a> atRelation</h3><p>Assert the related model.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>AssertableJsonApi</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$relatedComment</span> <span class="token operator">=</span> <span class="token class-name static-context">Comment</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">AssertableJsonApi</span> <span class="token variable">$assert</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$relatedComment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">atRelation</span><span class="token punctuation">(</span><span class="token variable">$relatedComment</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;content&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Foo bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hasattribute" tabindex="-1"><a class="header-anchor" href="#hasattribute" aria-hidden="true">#</a> hasAttribute</h3><p>Assert the resource has the specified attribute key and value.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>AssertableJsonApi</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">AssertableJsonApi</span> <span class="token variable">$assert</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),R={id:"hasnotattribute",tabindex:"-1"},C=s("a",{class:"header-anchor",href:"#hasnotattribute","aria-hidden":"true"},"#",-1),N=a(" hasNotAttribute "),L=o(`<p>Assert the resource does not has the specified attribute key and value.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>AssertableJsonApi</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">AssertableJsonApi</span> <span class="token variable">$assert</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">hasNotAttribute</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hasattributes" tabindex="-1"><a class="header-anchor" href="#hasattributes" aria-hidden="true">#</a> hasAttributes</h3><p>Assert the resource has the specified attributes keys and values.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>AssertableJsonApi</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">AssertableJsonApi</span> <span class="token variable">$assert</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">hasAttributes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Hello world&#39;</span>
    <span class="token string single-quoted-string">&#39;slug&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;hello-world&#39;</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),O={id:"hasnotattributes",tabindex:"-1"},H=s("a",{class:"header-anchor",href:"#hasnotattributes","aria-hidden":"true"},"#",-1),I=a(" hasNotAttributes "),W=o(`<p>Assert the resource does not has the specified attributes keys and values.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>AssertableJsonApi</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">AssertableJsonApi</span> <span class="token variable">$assert</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">hasNotAttributes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Hello world&#39;</span>
    <span class="token string single-quoted-string">&#39;slug&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;hello-world&#39;</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hasid" tabindex="-1"><a class="header-anchor" href="#hasid" aria-hidden="true">#</a> hasId</h3><p>Assert the resource has the specified ID (or model key).</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>AssertableJsonApi</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">AssertableJsonApi</span> <span class="token variable">$assert</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">hasId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hastype" tabindex="-1"><a class="header-anchor" href="#hastype" aria-hidden="true">#</a> hasType</h3><p>Assert the resource has the specified type.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>AssertableJsonApi</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">AssertableJsonApi</span> <span class="token variable">$assert</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">hasType</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;post&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hasanyrelationships" tabindex="-1"><a class="header-anchor" href="#hasanyrelationships" aria-hidden="true">#</a> hasAnyRelationships</h3><p>Assert that the resource <strong>has any</strong> relationships with the specified <strong>resource type</strong>.</p><p>Second parameter is for assert that the response <strong>includes</strong> the relationship data at the <code>included</code>.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>AssertableJsonApi</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">AssertableJsonApi</span> <span class="token variable">$assert</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">hasAnyRelationships</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;comment&#39;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hasnotanyrelationships" tabindex="-1"><a class="header-anchor" href="#hasnotanyrelationships" aria-hidden="true">#</a> hasNotAnyRelationships</h3><p>Assert that the resource <strong>doesn&#39;t have any</strong> relationships with the specified <strong>resource type</strong>.</p><p>Second parameter is for assert that the response <strong>doesn&#39;t includes</strong> the relationship data at the <code>included</code>.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>AssertableJsonApi</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">AssertableJsonApi</span> <span class="token variable">$assert</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">hasNotAnyRelationships</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;comment&#39;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hasrelationshipwith" tabindex="-1"><a class="header-anchor" href="#hasrelationshipwith" aria-hidden="true">#</a> hasRelationshipWith</h3><p>Assert that the specific model resource <strong>is a</strong> relationship with the parent resource.</p><p>Second parameter is for assert that the response <strong>includes</strong> the relationship data at the <code>included</code>.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>AssertableJsonApi</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$relatedComment</span> <span class="token operator">=</span> <span class="token class-name static-context">Comment</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">AssertableJsonApi</span> <span class="token variable">$assert</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$relatedComment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">hasRelationshipWith</span><span class="token punctuation">(</span><span class="token variable">$relatedComment</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hasnotrelationshipwith" tabindex="-1"><a class="header-anchor" href="#hasnotrelationshipwith" aria-hidden="true">#</a> hasNotRelationshipWith</h3><p>Assert that the specific model resource <strong>is not</strong> a relationship with the parent resource.</p><p>Second parameter is for assert that the response <strong>doesn&#39;t includes</strong> the relationship data at the <code>included</code>.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>AssertableJsonApi</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$relatedComment</span> <span class="token operator">=</span> <span class="token class-name static-context">Comment</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">AssertableJsonApi</span> <span class="token variable">$assert</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$relatedComment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">hasRelationshipWith</span><span class="token punctuation">(</span><span class="token variable">$relatedComment</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iscollection" tabindex="-1"><a class="header-anchor" href="#iscollection" aria-hidden="true">#</a> isCollection</h3><p>Assert that the response is a collection (list of resources).</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>AssertableJsonApi</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">AssertableJsonApi</span> <span class="token variable">$assert</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">isCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="isresource" tabindex="-1"><a class="header-anchor" href="#isresource" aria-hidden="true">#</a> isResource</h3><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>AssertableJsonApi</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">AssertableJsonApi</span> <span class="token variable">$assert</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">isResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29);function B(P,V){const t=i("router-link"),p=i("Badge");return c(),u("div",null,[d,s("nav",k,[s("ul",null,[s("li",null,[n(t,{to:"#assertions"},{default:e(()=>[v]),_:1}),s("ul",null,[s("li",null,[n(t,{to:"#at"},{default:e(()=>[h]),_:1})]),s("li",null,[n(t,{to:"#atrelation"},{default:e(()=>[b]),_:1})]),s("li",null,[n(t,{to:"#hasattribute"},{default:e(()=>[g]),_:1})]),s("li",null,[n(t,{to:"#hasnotattribute"},{default:e(()=>[m,n(p,{type:"tip",text:"1.1.0",vertical:"middle"})]),_:1})]),s("li",null,[n(t,{to:"#hasattributes"},{default:e(()=>[f]),_:1})]),s("li",null,[n(t,{to:"#hasnotattributes"},{default:e(()=>[A,n(p,{type:"tip",text:"1.1.0",vertical:"middle"})]),_:1})]),s("li",null,[n(t,{to:"#hasid"},{default:e(()=>[_]),_:1})]),s("li",null,[n(t,{to:"#hastype"},{default:e(()=>[$]),_:1})]),s("li",null,[n(t,{to:"#hasanyrelationships"},{default:e(()=>[y]),_:1})]),s("li",null,[n(t,{to:"#hasnotanyrelationships"},{default:e(()=>[J]),_:1})]),s("li",null,[n(t,{to:"#hasrelationshipwith"},{default:e(()=>[w]),_:1})]),s("li",null,[n(t,{to:"#hasnotrelationshipwith"},{default:e(()=>[x]),_:1})]),s("li",null,[n(t,{to:"#iscollection"},{default:e(()=>[q]),_:1})]),s("li",null,[n(t,{to:"#isresource"},{default:e(()=>[S]),_:1})])])])])]),T,s("h3",R,[C,N,n(p,{type:"tip",text:"1.1.0",vertical:"middle"})]),L,s("h3",O,[H,I,n(p,{type:"tip",text:"1.1.0",vertical:"middle"})]),W])}var E=l(r,[["render",B],["__file","testing.html.vue"]]);export{E as default};
