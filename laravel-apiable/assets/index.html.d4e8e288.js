import{_ as u,r as a,o as r,c as d,a as e,w as t,b as n,d as s,e as o}from"./app.f9778456.js";const k={},m=n("h1",{id:"introduction",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),s(" Introduction")],-1),v=n("p",null,"Install with the following command:",-1),h=n("div",{class:"language-bash ext-sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"composer"),s(` require open-southeners/laravel-apiable
`)])])],-1),b=o(`<h2 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting started</h2><p>First publish the config file once installed like this:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>php artisan vendor:publish --provider<span class="token operator">=</span><span class="token string">&quot;OpenSoutheners\\LaravelApiable\\ServiceProvider&quot;</span>
</code></pre></div><p>Then edit the <code>resource_type_map</code> part including all your models like this:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token doc-comment comment">/**
 * Resource type model map.
 *
 * <span class="token keyword">@see</span> https://docs.opensoutheners.com/laravel-apiable/guide/#getting-started
 */</span>
<span class="token string single-quoted-string">&#39;resource_type_map&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
  <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Film</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;film&#39;</span><span class="token punctuation">,</span>
  <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Review</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;review&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),g=s("If you see, this is same as Laravel's "),f={href:"https://laravel.com/docs/master/eloquent-relationships#custom-polymorphic-types",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"Relation::enforceMorphMap()",-1),y=s(" but reversed."),w=n("h3",{id:"setup-your-models",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#setup-your-models","aria-hidden":"true"},"#"),s(" Setup your models")],-1),x={class:"custom-container tip"},A=n("p",{class:"custom-container-title"},"TIP",-1),q=s("For more information about how to customise this "),C=s("check out Responses section"),R=s("."),S=o(`<p>This is a bit of manual work, but you need to setup your models in order for them to be JSON:API serializable entities:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>JsonApiable</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>HasJsonApi</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Film</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token keyword">implements</span> <span class="token class-name">JsonApiable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">HasJsonApi</span><span class="token punctuation">;</span>

    <span class="token comment">// rest of your model</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You need to add that <code>implements JsonApiable</code> to your class importing this class and the <code>jsonApiableOptions</code> method.</p><h3 id="basic-transformation-usage" tabindex="-1"><a class="header-anchor" href="#basic-transformation-usage" aria-hidden="true">#</a> Basic transformation usage</h3><p>And, finally, use as simple as importing the class <code>OpenSoutheners\\LaravelApiable\\Http\\Resources\\JsonApiCollection</code> for collections or <code>OpenSoutheners\\LaravelApiable\\Http\\Resources\\JsonApiResource</code> for resources.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Resources<span class="token punctuation">\\</span>JsonApiCollection</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Film</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">FilmController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Display a listing of the resource.
     *
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">\\</span>OpenSoutheners<span class="token punctuation">\\</span>LaravelApiable<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Resources<span class="token punctuation">\\</span>JsonApiCollection</span>&lt;\\App\\Models\\Film&gt;
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonApiCollection</span><span class="token punctuation">(</span><span class="token class-name static-context">Film</span><span class="token operator">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling" aria-hidden="true">#</a> Error handling</h3><p>When your application returns errors and your frontend only understand JSON:API, then these needs to be transform. So we&#39;ve you cover, set them up by simply doing the following on your <code>app/Exceptions/Handler.php</code></p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token doc-comment comment">/**
 * Register the exception handling callbacks for the application.
 *
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">renderable</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Throwable</span> <span class="token variable">$e</span><span class="token punctuation">,</span> <span class="token variable">$request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;api/*&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">bound</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;apiable&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">apiable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">jsonApiRenderable</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token punctuation">,</span> <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Rest of the register method...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function J(L,O){const p=a("CodeGroupItem"),i=a("CodeGroup"),c=a("ExternalLinkIcon"),l=a("RouterLink");return r(),d("div",null,[m,v,e(i,null,{default:t(()=>[e(p,{title:"COMPOSER"},{default:t(()=>[h]),_:1})]),_:1}),b,n("p",null,[n("strong",null,[g,n("a",f,[_,e(c)]),y])]),w,n("div",x,[A,n("p",null,[q,e(l,{to:"/guide/responses.html"},{default:t(()=>[C]),_:1}),R])]),S])}var M=u(k,[["render",J],["__file","index.html.vue"]]);export{M as default};
